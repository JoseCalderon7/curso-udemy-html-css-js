PRIMITIVO = No contiene propediades (atributos) y tampoco métodos. / Valor individual

OBJETOS:
    - Puede obtener propediades (atributos)
    - Puede obtener métodos
    - Pueden ser referenciados

TIPS:
* Para llamar una función se debe llamar los "()" para que estos funcionen.
* Imprimir directamente en nuestro navegador en ocasiones veremos Object solamente y no el contenido.
* Podemos llamar métodos sin problemas entre objetos con ".call" respectivamente.
* Utilizar "this" es solamente cuando es una propiedad interna, y cuando queremos utilizar el parametro se
  llama sin el this como tal.

JSON.stringify = Notación de propiedad / valor. (Cada variable de nuestro objeto lo convierte a una cadena)

~~~~~~~~~~~~~~~~~~~~~~ESTRUCTURAS~~~~~~~~~~~~~~~~~~~~~~~~~

PRIMITIVO:
let x = 99;
console.log(x);

OBJETOS:
let persona = {
    nombre : "Juan",
    apellido : "Perez",
    edad : 48,
    nombreCompleto : function () {
        return this.nombre + ' ' + this.apellido + ' ' + this.edad
    }
}

- OBJETO CON "get" y "set"
let persona3 = {
    //COLECCIÓN DE PROPIEDADES DE NUESTRO OBJETO
    nombre : "Juan",
    apellido : "Perez",
    edad : 48,
    idioma : 'es',
    get lang(){
        return this.idioma.toUpperCase()
    },
    set lang(lang){
        this.idioma = lang.toUpperCase()
    },
    get nombreCompleto() {
        return this.nombre + ' ' + this.apellido + ' ' + this.edad
    }
}

CONTRUCTOR DE OBJETO:
function Persona(nombre, apellido, email) {
    this.nombre = nombre,
        this.apellido = apellido,
        this.email = email,
        this.nombreCompleto = function () {
            return this.nombre + ' ' + this.apellido
        }
}

~~~~~~~~~~~~~~~~~~~~~~CONSTRUCTORES~~~~~~~~~~~~~~~~~~~~~~~~~
Un constructor es una funcion especial para trabajar con objetos en JS.

this (propiedad) = (parametro)

- Cada vez que creamos un nuevo objeto lo llamamos con "new" y el nombre del constructor.
- El nombre del parametro es igual al atributo.
- this = nos ayuda a trabajar con las propiedades del objeto.